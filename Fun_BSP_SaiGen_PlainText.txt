Fun_BSP_SaiGen_PlainText<-function(x, n=1, straddle=FALSE)#文節パターンＢの再現
{
  #测试环境
  if(0){x<-corrected_text_pool[1]; n=2; straddle=FALSE}
  #library(dplyr)#因为之后要用pipe运算符
  #x为日语的plain text
  #n为n-gram中的n，默认为1
  res_cabocha<-fun_cabocha(x)#先将x按文节切割
  len_res_cabocha<-length(res_cabocha)#求x的长度（文节单位）
  if(1){
    分母1<-nchar(x)#x含字符数
    分母2<-x%>%Analytic_MeCab_429()%>%nrow()#x含词素数
    分母3<-len_res_cabocha-n+1#x含连文节数
  }
  连文节<-rep("", 分母3)#创建存储连文件的空向量
  for(i in 1:分母3){
    当前对象的序列号<-i:(i+n-1)
    for(j in 当前对象的序列号)
      连文节[i]<-paste0(连文节[i], res_cabocha[j])
  }
  if(!straddle){
    连文节<-连文节[-which(str_detect(连文节, "^.*[。？].+$"))]#若straddle为真，则对连文节不做任何处理；若为否，则利用正规表现剔除【在非句末位置上，存在句号（准句号）】的要素
    分母3<-length(连文节)#更新分母3，即输入文本含连文节数量（长度为n）
  }
  middle_res_for_LBS<-rep("", 分母3)#为连文件准备存储其中期结果的空向量
  for(i in 1:分母3){
    cat("开始处理第",i,"个连文节。\n")
    current_res_mecab<-连文节[i]%>%Analytic_MeCab_429()#对于当前连文件，调用MeCab进行词素解析
    middle_res_for_LBS[i]<-current_res_mecab%>%fun_BSPattern_reproduction()#对于当前连文件的词素解析结果抽取【文節パターンＢ】特征量
    cat("处理完成第",i,"个连文节。\n")
    # temp<-nrow(current_res_mecab)
    # 当前连文节含词素数<-ifelse(!is.null(temp), temp, 0)
    # rm(current_res_mecab)
  }
  # 度数向量<-table(middle_res)
  freq<-sort(table(middle_res_for_LBS), decreasing=TRUE)
  相对度数向量集<-list(
    字符数=freq/分母1,#分母1为输入文本含字符数
    词素数=freq/分母2,#分母2为输入文本含词素数
    文节数=freq/分母3#分母为输入文本含连文节数
  )
  分母集<-c(分母1, 分母2, 分母3)
  list(度数向量=度数向量, 相对度数向量集=相对度数向量集, 分母集=分母集)
}
